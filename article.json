[{

  "title" : "实现 ssh 免密登陆服务器",
  "time" : "2020-03-14",
  "tags" : ["Git", "Node"],
  "desc" : "<span>创建 ssh 公钥<span/><br/><span># 进入ssh 查看公钥cat ~/.ssh/id_rsa.pub<span/><br/><span># 如果不存在 则需要创建公钥ssh-keygen -t rsa -C gershonv@163.com<span/><br/><span>复制完公钥后，我们先登陆进服务器。<span/>",
  "articleId" : "2",
  "content":"<p>用来方便使用，免去繁琐的创建过程，所以写了个脚本工具，记录下来。</p><p>需求：执行 node 文件，在控制台输入 文章标题、文章分类、以及文件名后自动创建 MD 文件。实现的功能如下：</p><figure class=\"image\"></figure><p>创建的内容如下：</p><p>---title: nodedate: 2020-01-09 10:09:38---</p><p>路径则是 xxx/docs/node/node.md</p><h2><strong>前置知识</strong></h2><ul><li><a href=\"https://github.com/tj/commander.js\">commander</a>: 解析用户命令行输入</li><li><a href=\"https://github.com/SBoudrias/Inquirer.js\">inquirer</a>: 常见的交互式命令行用户界面的集合</li><li><a href=\"https://github.com/chalk/chalk\">chalk</a>: 美化命令行，进行着色</li></ul><h3><strong>commander</strong></h3><p><a href=\"https://github.com/tj/commander.js\">commander</a>灵感来自 Ruby，它提供了用户命令行输入和参数解析的强大功能，可以帮助我们简化命令行开发。<br>根据其官方的描述，具有以下特性:</p><ul><li>参数解析</li><li>强制多态</li><li>可变参数</li><li>Git 风格的子命令</li><li>自动化帮助信息</li><li>自定义帮助等</li></ul><p><strong>example</strong></p><p>const program = require('commander')const inquirer = require('inquirer')const chalk = require('chalk')program&nbsp;.command('module')&nbsp;.alias('m')&nbsp;.description('输入名称')&nbsp;.option('-n, --name [moduleName]', '模块名称')&nbsp;.action(option =&gt; {&nbsp; &nbsp;console.log('Hello World', option.name)&nbsp;})&nbsp;.command('module')&nbsp;.alias('m')&nbsp;.description('输入名称')&nbsp;.option('-n, --name [moduleName]', '模块名称')&nbsp;.action(option =&gt; {&nbsp; &nbsp;console.log('Hello World', option.name)&nbsp;})&nbsp;.command('module')&nbsp;.alias('m')&nbsp;.description('输入名称')&nbsp;.option('-n, --name [moduleName]', '模块名称')&nbsp;.action(option =&gt; {&nbsp; &nbsp;console.log('Hello World', option.name)&nbsp;})&nbsp;.command('module')&nbsp;.alias('m')&nbsp;.description('输入名称')&nbsp;.option('-n, --name [moduleName]', '模块名称')&nbsp;.action(option =&gt; {&nbsp; &nbsp;console.log('Hello World', option.name)&nbsp;})program.parse(process.argv)$ node app m -n guosw <i>// 输出：Hello World guosw</i></p><p><strong>commander API</strong></p><h2><strong>后置知识</strong></h2>"
}]